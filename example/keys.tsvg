<svg id="todo1" class="todo2" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0" y="0" width={@makeWidth(@height)} height={@height} viewBox="-100 -1 1300 695">
  <!-- was 1100 x 694
       must make it 1100 x 1100 to run this:
         qlmanage -t -s 1100 -o . keys.svg 2> /dev/null
       output svg @ 79KB -> output png @ 168KB
       x 21 = svgs = 1,659KB vs. pngs = 3,528KB
       v. keys.js = 264KB
  -->
  <defs>
  
    <Font white-list-chars="abcdefgABCDEFGùÑ™ùÑ´‚ô≠‚ôØ" path="/Users/jupdike/Downloads/fira-sans-condensed/enhanced-firasanscondensed-book.svg"/>
    <Font white-list-chars="-abcdefgABCDEFG" path="/Users/jupdike/Downloads/fira-sans/FiraSans-Book.svg"/>
    <Font white-list-chars="IViv/¬∞‚ô≠‚ôØ" path="/Users/jupdike/Downloads/charter/ttf/Enhanced-CharterRegular.svg"/>

    @height = 480;
    @makeWidth = (height) => 1400 * height / 694;

    @normal = "FiraSans-Book";
    @narrow = "FiraSansCondensed-Book";

    <g id="up-tri">
      <path style="fill: #ddd; stroke: #999; stroke-width: 5px" d="M 0,173.2 l 100,0 l -100,-173.2 l -100,173.2 z"/>
    </g>
    <g id="down-tri">
      <path style="fill: #ddd; stroke: #999; stroke-width: 5px" d="M 0,173.2 l 100,-173.2 l -200,0 z"/>
    </g>
    <g id="up-tri-2">
      <path style="fill: #fff; stroke: #444; stroke-width: 5px" d="M 0,173.2 l 100,0 l -100,-173.2 l -100,173.2 z"/>
    </g>
    <g id="down-tri-2">
      <path style="fill: #fff; stroke: #444; stroke-width: 5px" d="M 0,173.2 l 100,-173.2 l -200,0 z"/>
    </g>
    <g id="up-tri-3">
      <path style="fill: #fff; stroke: #ddd; stroke-linejoin: bevel; stroke-width: 5px" d="M 0,173.2 l 100,0 l -100,-173.2 l -100,173.2 z"/>
    </g>
    <g id="down-tri-3">
      <path style="fill: #fff; stroke: #ddd; stroke-linejoin: bevel; stroke-width: 5px" d="M 0,173.2 l 100,-173.2 l -200,0 z"/>
    </g>

    <g id="up-tri-4">
      <path style="fill: #fff; stroke: #000; stroke-linejoin: round; stroke-width: 7px" d="M 0,173.2 l 100,0 l -100,-173.2 l -100,173.2 z"/>
    </g>
    <g id="down-tri-4">
      <path style="fill: #fff; stroke: #000; stroke-linejoin: round; stroke-width: 7px" d="M 0,173.2 l 100,-173.2 l -200,0 z"/>
    </g>
    <g id="up-tri-5">
      <path stroke-dasharray='2.5,5,4.5,0' style="fill: transparent; stroke-linejoin: round; stroke: #fff; stroke-width: 8px" d="M 0,173.2 l 100,0 l -100,-173.2 l -100,173.2 z"/>
    </g>
    <g id="down-tri-5">
      <path stroke-dasharray='7,5' style="fill: transparent; stroke: #fff; stroke-linejoin: round; stroke-width: 8px" d="M 0,173.2 l 100,-173.2 l -200,0 z"/>
    </g>
  </defs>
  <!--rect x="0" y="0" width=width height=height fill="red"/-->

  @beadgcf = "B E A D G C F".split(' ');
  @myzip = (ch) => @beadgcf.map(x => x + ch);
  @hyphens = "- - - - - - -".split(' ');
  @texts = @flatten([@hyphens, @myzip('ùÑ™'), @myzip('‚ôØ'), @myzip(''), @myzip('‚ô≠'), @myzip('ùÑ´'), @hyphens]);
  @bgtextstyle = @makeStyle({'fill': '#999', 'font-family': "'Helevtica Neue', Arial, sans-serif", 'font-size': '55px'});
  @fgtextstyle = @makeStyle({'fill': '#222', 'font-family': "'Helevtica Neue', Arial, sans-serif", 'font-size': '55px'});
  @romantextstyle = {'fill': 'red', 'font-family': "Georgia, 'Times New Roman', serif", 'font-size': '35px'};
  @samplestyle = @makeStyle({});
  @textpathstyle = @makeStyle({'fill': 'red'});
  @minorList = [0, 4, 7, 11];
  @majorList = [0, 3, 7, 10];
  @minorOffset = 102;
  @majorOffset = 112;
  @pcColors = "#00c #a4f #f0f #a16 #e02 #f91 #c81 #094 #161 #077 #0bb #28f".split(' ');
  @colorIndex = [2, 7, 0, 5, 10, 3, 8, 1, 6,  11, 4, 9];
  <!-- this is sort of the only argument, from -11 (11 sharps) to 11 (11 flats), 0 = key of C (no sharps or flats) -->
  @keyIndex = 0;
  <For from="0" upTo="3">{j =>
    <For from="-1" upTo="6">
      {i => <use xlink:href="#up-tri"   transform={@translate(i*200 + ((j+1)%2)*100, 173.2*j)}/>}
      {i => <use xlink:href="#down-tri" transform={@translate(i*200 + ((j+0)%2)*100, 173.2*j)}/>}
      {i => ((txt => <TextPath x={200*i + ((j+0)%2)*100} y={@minorOffset + 173.2*j}
        font-id={txt.length === 1 ? @normal : @narrow}
        text-anchor="middle" style={@bgtextstyle}>
        {txt}
      </TextPath>)( @texts[i + (+(@keyIndex)) + 16 +  @minorList[j]].toLowerCase()) ) }
      {i => ((txt => <TextPath x={200*i + ((j+1)%2)*100} y={@majorOffset + 173.2*j}
        font-id={txt.length === 1 ? @normal : @narrow}
        text-anchor="middle" style={@bgtextstyle}>
        {txt}
      </TextPath>)( @texts[i + (+(@keyIndex)) + 20 +  @majorList[j]]) ) }
    </For>
  }</For>
  @refs = "#down-tri-2 #up-tri-2 #down-tri-3 #up-tri-3 #down-tri-4 #up-tri-4 #down-tri-5 #up-tri-5".split(' ');
  @triples = [[0,1,0, "vii¬∞/iii"], [0,2,0, "vii¬∞/vi"], [0,3,0, "vii¬∞/ii"], [0,4,0, "vii¬∞/V"], [0,4,1, "ii"],
              [0,2,3, "‚ô≠iii"], [0,3,3, "‚ô≠vi"],
              [1,1,1, "V/V"], [1,1,2, "‚ô≠VII"], [1,4,2, "‚ô≠II"],
              [2,2,2, "iv"], [2,4,2, "iv"], [2,1,1, "vii¬∞"], [2,2,1, "iii"], [2,3,1, "vi"],
              [3,2,1, "V"], [3,4,1, "IV"], [3,2,2, "III"], [3,3,2, "‚ô≠VI"],
              [3,1,0, "V/iii"], [3,2,0, "V/vi"], [3,3,0, "V/ii"],
              [4,3,2, "i"], [6,3,2, ""],
              [5,3,1, "I"], [7,3,1, ""]];
  <For from="0" upTo={@triples.length-1}>
    {ix => (((z,i,j) => <use xlink:href={@refs[z]} transform={@translate(i*200 + ((j+z)%2)*100, 173.2*j)}/>)(@triples[ix][0], @triples[ix][1], @triples[ix][2]))}
    {ix => (((z,i,j) =>
      ((z+1)%2 ?
        (txt => <TextPath font-id={txt.length === 1 ? @normal : @narrow}
          x={200*i + ((j+z)%2)*100} y={@minorOffset + 173.2*j} text-anchor="middle" style={@fgtextstyle}>
          {txt}
        </TextPath>)( @texts[i + (+(@keyIndex)) + 16 +  @minorList[j]].toLowerCase() ) :
        (txt => <TextPath font-id={txt.length === 1 ? @normal : @narrow} x={200*i + ((j+z)%2)*100} y={@majorOffset + 173.2*j}
          text-anchor="middle" style={@fgtextstyle}>
          {txt}
        </TextPath>)( @texts[i + (+(@keyIndex)) + 20 +  @majorList[j]] ))
      )(@triples[ix][0], @triples[ix][1], @triples[ix][2]))}
    {ix => (((z,i,j,txt) => <TextPath x={200*i + ((j+z)%2)*100} y={((z+1)%2 ? 44 : 158) + 173.2*j} text-anchor="middle" letter-spacing={txt.toUpperCase() === txt ? "-0.07em" : "0"} font-id="Charter"
    style={@makeStyle(@with(@romantextstyle, 'fill', @pcColors[ @colorIndex[
      (z+1)%2 ? 
        (i + (+(@keyIndex)) + 16 + @minorList[j])%12 :
        (i + (+(@keyIndex)) + 20 + @majorList[j])%12 ] ]))}>
      {txt}
    </TextPath>)(@triples[ix][0], @triples[ix][1], @triples[ix][2], @triples[ix][3]))}
  </For>

  {@lines( {style: "stroke: #444; stroke-linecap: round; stroke-width: 5px"},
    [ [1,0,9,0], [1,0,2,1], [2,1,1,2], [1,2,3,2], [3,2,2,3], [2,3,4,3], [4,3,5,4],
      [7,4,8,3], [8,3,10,3], [10,3,9,2], [9,2,10,1], [10,1,8,1], [8,1,9,0] ]
       .map(quad => [quad[0]*100, quad[1]*173.2, quad[2]*100, quad[3]*173.2]) )}

  <!--TextPath font-id="FiraSansCondensed-Book" x="0" y="70" font-size="460" style="fill: red">ùÑ´</TextPath-->

</svg>
