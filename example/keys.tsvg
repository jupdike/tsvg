<svg id="kb-svg-horiz" class="kb-bottom" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0" y="0" width="1100" height="694" viewBox="0 0 1100 694">
  <defs>
    <g id="up-tri">
      <path style="fill: #ddd; stroke: #999; stroke-width: 2px" d="M 0,173.2 l 100,0 l -100,-173.2 l -100,173.2 z"/>
    </g>
    <g id="down-tri">
      <path style="fill: #ddd; stroke: #999; stroke-width: 2px" d="M 0,173.2 l 100,-173.2 l -200,0 z"/>
    </g>
    <g id="up-tri-2">
      <path style="fill: #fff; stroke: #444; stroke-width: 3px" d="M 0,173.2 l 100,0 l -100,-173.2 l -100,173.2 z"/>
    </g>
    <g id="down-tri-2">
      <path style="fill: #fff; stroke: #444; stroke-width: 3px" d="M 0,173.2 l 100,-173.2 l -200,0 z"/>
    </g>
    <g id="up-tri-3">
      <path style="fill: #fff; stroke: #ddd; stroke-width: 3px" d="M 0,173.2 l 100,0 l -100,-173.2 l -100,173.2 z"/>
    </g>
    <g id="down-tri-3">
      <path style="fill: #fff; stroke: #ddd; stroke-width: 3px" d="M 0,173.2 l 100,-173.2 l -200,0 z"/>
    </g>
  </defs>
  <rect x="0" y="0" width="1100" height="694" fill="red"/>

  @beadgcf = "B E A D G C F".split(' ');
  @myzip = (ch) => @beadgcf.map(x => x + @unescapeSharpsFlatsNats(ch));
  @hyphens = "- - - - - - -".split(' ');
  @texts = @flatten([@hyphens, @myzip('\\#\\#'), @myzip('\\#'), @myzip(''), @myzip('\\b'), @myzip('\\b\\b'), @hyphens]);
  @bgtextstyle = @makeStyle({'fill': '#999', 'font-family': "'Helevtica Neue', Arial, sans-serif", 'font-size': '55px'});
  @minorList = [0, 4, 7, 11];
  @majorList = [0, 3, 7, 10];
  <!-- this is sort of the only argument ... could be appended by other program to generate multiple .svg files, then .png, etc.
       from -10 (10 sharps) to 10 (10 flats), 0 = key of C (no sharps or flats) -->
  @keyIndex = 0;
  <For from="0" upTo="3">
    {j => <For from="0" upTo="6">
      {i => <use xlink:href="#up-tri"   transform={@translate(i*200 + ((j+1)%2)*100, 173.2*j)}/>}
      {i => <use xlink:href="#down-tri" transform={@translate(i*200 + ((j+0)%2)*100, 173.2*j)}/>}
      {i => <text x={200*i + ((j+0)%2)*100} y={80 + 172.3*j} text-anchor="middle" style={@bgtextstyle}>
        {@texts[i + @keyIndex + 16 +  @minorList[j]].toLowerCase()}
      </text>}
      {i => <text x={200*i + ((j+1)%2)*100} y={133 + 172.3*j} text-anchor="middle" style={@bgtextstyle}>
        {@texts[i + @keyIndex + 20 +  @majorList[j]]}
      </text>}
    </For>}
  </For>

  @refs = "#down-tri-2 #up-tri-2 #down-tri-3 #up-tri-3".split(' ');
  @triples = [[0,1,0], [0,2,0], [0,3,0], [0,4,0], [0,4,1], [0,2,3], [0,3,3],   [1,1,1], [1,1,2], [1,4,2],  [2,2,2], [2,3,2], [2,4,2], [2,1,1], [2,2,1], [2,3,1],   [3,2,1], [3,3,1], [3,4,1], [3,2,2], [3,3,2], [3,1,0], [3,2,0], [3,3,0]];
  <For from="0" upTo={@triples.length-1}>
    {ix => (((z,i,j) => <use xlink:href={@refs[z]} transform={@translate(i*200 + ((j+z)%2)*100, 173.2*j)}/>)(@triples[ix][0], @triples[ix][1], @triples[ix][2]))}
  </For>

</svg>
